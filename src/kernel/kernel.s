.CODE16

.GLOBL _start
.GLOBL .TEST_FAIL
.EXTERN NL
.EXTERN PRINT
.EXTERN PRINT_HEX
.EXTERN PS2_START

_start:
	JMP MAIN

KBHAND:
	PUSH %AX
	PUSH %BX
	PUSH %SI
	XOR %AX, %AX
	INB $0x60, %AL
	CMP $0x80, %AX
	JGE .SKIP
	CMP $0x1C, %AX
	JE .NL
	LEA KBMAP, %BX
	ADD %AX, %BX
	MOV (%BX), %AL
	OR %AL, %AL
	JZ .SKIP
	MOV $0x0E, %AH
	MOV $0x000F, %BX
	INT $0x10
	JMP .SKIP
	.NL:
	MOV $NL, %SI
	CALL PRINT
	.SKIP:
	POP %SI
	POP %BX
	MOV $0x20, %AL
	OUT %AL, $0x20
	POP %AX

	AND $0x80, %BL
	JNZ .DONE

.DONE:
	IRET

MOUSEHAND:
	PUSH %AX
	INB $0x64, %AL
	AND $0x20, %AL
	JZ .MOUSECONT

	MOV PK_IDX, %AL

	PUSH %BX
	XOR %AH, %AH
	SHL $1, %AL
	LEA JMP_TABLE, %BX
	ADD %AX, %BX
	MOV (%BX), %AX
	POP %BX
	PUSH %AX
	RET

	JMP_TABLE:
		.WORD ACK_BIT
		.WORD SET_FLAGS
		.WORD MOVE_X
		.WORD MOVE_Y
	ACK_BIT:
		JMP MOUSEDEFAULT
	SET_FLAGS:
		INB $0x60, %AL
		PUSH %AX
		AND $0xC0, %AL
		JZ .VALID
		MOVB $0x01, PK_INVALID
		POP %AX
		JMP .MOUSECONT
		.VALID:
		POP %AX

		AND $0x30, %AL
		PUSH %BX
		XOR %AH, %AH
		SHR $3, %AL
		LEA SGN_TABLE, %BX
		ADD %AX, %BX
		MOV (%BX), %AX
		POP %BX
		PUSH %AX
		RET

		SGN_TABLE:
			.WORD NOTHING
			.WORD SETX
			.WORD SETY
			.WORD SETXY
		NOTHING:
			MOVB $0x00, CURSOR_DX_AH
			MOVB $0x00, CURSOR_DY_AH
			JMP .MOUSECONT
		SETXY:
			MOVB $0xFF, CURSOR_DX_AH
			MOVB $0xFF, CURSOR_DY_AH
			JMP .MOUSECONT
		SETX:
			MOVB $0xFF, CURSOR_DX_AH
			MOVB $0x00, CURSOR_DY_AH
			JMP .MOUSECONT
		SETY:
			MOVB $0x00, CURSOR_DX_AH
			MOVB $0xFF, CURSOR_DY_AH
			JMP .MOUSECONT
	MOVE_X:
		MOV CURSOR_DX_AH, %AH
		INB $0x60, %AL
		ADD %AX, CURSOR_X

		XOR %AX, %AX
		CMP CURSOR_X, %AX
		JL .CMP_X_HIGH
		MOV %AX, CURSOR_X

		.CMP_X_HIGH:
		MOV $319, %AX
		CMP CURSOR_X, %AX
		JG .MOUSECONT
		MOV %AX, CURSOR_X

		JMP .MOUSECONT
	MOVE_Y:
		MOV CURSOR_DY_AH, %AH
		INB $0x60, %AL
		SUB %AX, CURSOR_Y

		XOR %AX, %AX
		CMP CURSOR_Y, %AX
		JL .CMP_Y_HIGH
		MOV %AX, CURSOR_Y

		.CMP_Y_HIGH:
		MOV $199, %AX
		CMP CURSOR_Y, %AX
		JG .NO_Y_HIGH_CLAMP
		MOV %AX, CURSOR_Y

		.NO_Y_HIGH_CLAMP:
		MOVB $0x00, PK_IDX
		MOVB $0x00, PK_INVALID
		JMP .MOUSECONT

MOUSEDEFAULT:
	INB $0x60, %AL
//	CALL PRINT_HEX
	.MOUSECONT:
	INCB PK_IDX
	MOV $0x20, %AL
	OUT %AL, $0x20
	OUT %AL, $0xA0
	POP %AX
	IRET

TIMERHAND:
	PUSH %AX
	PUSH %DI
	PUSH %ES

	MOV $0xA000, %AX
	MOV %AX, %ES

	MOV CURSOR_Y, %AX
	MOV $320, %DX
	MUL %DX
	ADD CURSOR_X, %AX 
	MOV %AX, %DI
	MOV $76, %AL
	STOSB

	MOV $0x20, %AL
	OUT %AL, $0x20

	POP %ES
	POP %DI
	POP %AX
	IRET

DIVZHAND:
	POP %AX
	ADD $0x2, %AX
	PUSH %AX
	PUSH %SI
	MOV $DIVZ_TEXT, %SI
	CALL PRINT
	MOV $0x20, %AL
	OUT %AL, $0x20
	POP %SI
	XOR %AX, %AX
	XOR %DX, %DX
	IRET

MAIN:
	MOV $TEST, %SI
	CALL PRINT

	XOR %AX, %AX
	MOV %AX, %DS
	MOV %AX, %ES
	MOV %AX, %FS
	MOV %AX, %GS
	MOV %AX, %SS
	MOVW $0x3000, %SP

	CLI

	CALL PS2_START

	MOVW $DIVZHAND, %ES:(0x00*4)
	MOVW $0x0, %ES:(0x00*4+2)
	MOVW $TIMERHAND, %ES:(0x08*4)
	MOVW $0x0, %ES:(0x08*4+2)
	MOVW $KBHAND, %ES:(0x09*4)
	MOVW $0x0, %ES:(0x09*4+2)
	MOVW $MOUSEHAND, %ES:(0x74*4)
	MOVW $0x0, %ES:(0x74*4+2)
	STI

	XOR %AX, %AX
	DIV %AX

.LOOP:
	JMP .LOOP
.TEST_FAIL:
	MOV $TEST_FAIL, %SI
	CALL PRINT
	CALL PRINT_HEX
	MOV $NL, %SI
	CALL PRINT
	JMP .LOOP

PK_IDX: .BYTE 0x00
PK_INVALID: .BYTE 0x00
CURSOR_X: .WORD 0x0000
CURSOR_Y: .WORD 0x0000
CURSOR_DX_AH: .BYTE 0x00
CURSOR_DY_AH: .BYTE 0x00
.SECTION .rodata
TEST_FAIL: .ASCIZ "FAILED: "
TEST: .ASCIZ "welcome to freaky os\r\n"
TIMER_TEXT: .ASCIZ "hello bro\r\n"
DIVZ_TEXT: .ASCIZ "bro divided by zero\r\n"

KBMAP:
	.BYTE 0x00
	.BYTE 0x1b
	.ASCIZ "1234567890-=\b\tqwertyuiop[]\n"
	.ASCIZ "asdfghjkl;'`"
	.ASCIZ "\\zxcvbnm,./"
	.BYTE 0x2a
	.BYTE 0x00
	.BYTE 0x20

