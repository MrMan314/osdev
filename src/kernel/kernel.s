.CODE16

.GLOBAL _start

_start:
	JMP MAIN

INTHAND:/*
	MOV $0xA000, %AX
	MOV %AX, %ES
*/
	PUSH %AX
	PUSH %BX
	PUSH %SI
	XOR %AX, %AX
	INB $0x60, %AL
//	JZ .SKIP
	CMP $0x80, %AX
	JGE .SKIP
	ADD $KBMAP, %AX
	MOV %AX, %SI
	LODSB
//	MOV $0x64, %AL
	MOV $0x0E, %AH
	MOV $0x000F, %BX
	INT $0x10
	.SKIP:
	POP %SI
	POP %BX
	MOV $0x20, %AL
	OUT %AL, $0x20
	POP %AX

	AND $0x80, %BL
	JNZ .DONE

.DONE:
	IRET

MOUSEHAND:
	PUSH %AX
	INB $0x60, %AL
	CALL PRINT_HEX
	MOV $0x20, %AL
	OUT %AL, $0x20
	OUT %AL, $0xA0
	POP %AX
	IRET

MAIN:
	MOV $0x02, %AH
	XOR %BH, %BH
	MOV $0x0800, %DX
	INT $0x10

	MOV $0xA000, %AX
	MOV %AX, %ES

	MOV $0x0228, %AX
	MOV $0x0011, %CX
	XOR %DH, %DH
	XOR %BX, %BX
	MOV $0x0000, %BX
	INT $0x13

	XOR %AX, %AX
	MOV %AX, %ES

	MOV $TEST, %SI
	CALL PRINT

	XOR %AX, %AX
	MOV %AX, %DS
	MOV %AX, %ES
	MOV %AX, %FS
	MOV %AX, %GS
	MOV %AX, %SS
	MOVW $0x3000, %SP

	CLI

	PS2_DISABLE:
	CALL PS2_WAIT_WRITE
	MOVB $0xAD, %AL
	OUTB %AL, $0x64
	CALL PS2_WAIT_WRITE
	MOVB $0xA7, %AL
	OUTB %AL, $0x64

	PS2_FLUSH:
	CALL PS2_WAIT_READ
	INB $0x60, %AL

//	JMP PS2_TEST
	PS2_CONFIG:
	CALL PS2_WAIT_WRITE
	MOVB $0x20, %AL
	OUTB %AL, $0x64

	MOV $CONFIG_MSG, %SI
	CALL PRINT

	CALL PS2_WAIT_READ
	INB $0x60, %AL
	CALL PRINT_HEX
//	ORB $0b00000000, %AL
	AND $0b10101110, %AL

	CALL PRINT_HEX
	MOV $NL, %SI
	CALL PRINT

	PUSH %AX

	CALL PS2_WAIT_WRITE
	MOVB $0x60, %AL
	OUTB %AL, $0x64

	POP %AX

	CALL PS2_WAIT_WRITE
	OUTB %AL, $0x60

	PS2_TEST:
	CALL PS2_WAIT_WRITE
	MOVB $0xAA, %AL
	OUTB %AL, $0x64

	MOV $TEST_MSG, %SI
	CALL PRINT
	CALL PS2_WAIT_READ
	INB $0x60, %AL
	CMP $0x55, %AL
	JNE .TEST_FAIL
	MOV $TEST_PASS, %SI
	CALL PRINT

	PS2_CHANNELS:
	CALL PS2_WAIT_WRITE
	MOVB $0xA8, %AL
	OUTB %AL, $0x64

	CALL PS2_WAIT_WRITE
	MOVB $0x20, %AL
	OUTB %AL, $0x64
	CALL PS2_WAIT_READ
	INB $0x60, %AL
//	CALL PRINT_HEX
	AND $0x20, %AL
	JNZ PS2_SINGLE_CHANNEL
	MOV $DUAL_CHANNEL, %SI
	CALL PRINT
	CALL PS2_WAIT_WRITE
	MOVB $0xA7, %AL
	OUTB %AL, $0x64

	JMP PS2_INTERFACE_TEST
	PS2_SINGLE_CHANNEL:
	MOVB $0x01, IS_SINGLE_CHANNEL
	MOV $SINGLE_CHANNEL, %SI
	CALL PRINT

	PS2_INTERFACE_TEST:
	MOV $PORT1_NAME, %SI
	CALL PRINT
	CALL PS2_WAIT_WRITE
	MOVB $0xAB, %AL
	OUTB %AL, $0x64
	CALL PS2_WAIT_READ
	INB $0x60, %AL
	JNZ .TEST_FAIL
//	CALL PRINT_HEX
	MOV $TEST_PASS, %SI
	CALL PRINT

	MOV $PORT2_NAME, %SI
	CALL PRINT
	CALL PS2_WAIT_WRITE
	MOVB $0xA9, %AL
	OUTB %AL, $0x64
	CALL PS2_WAIT_READ
	INB $0x60, %AL
	JNZ .TEST_FAIL
//	CALL PRINT_HEX
	MOV $TEST_PASS, %SI
	CALL PRINT

	PS2_ENABLE:
	CALL PS2_WAIT_WRITE
	MOVB $0xAE, %AL
	OUTB %AL, $0x64

	XORB %AL, %AL
	OR IS_SINGLE_CHANNEL, %AL
	JZ PS2_CONFIG2

	CALL PS2_WAIT_WRITE
	MOVB $0xA8, %AL
	OUTB %AL, $0x64

	PS2_CONFIG2:
	CALL PS2_WAIT_WRITE
	MOVB $0x20, %AL
	OUTB %AL, $0x64

	MOV $CONFIG_MSG, %SI
	CALL PRINT

	CALL PS2_WAIT_READ
	INB $0x60, %AL
	CALL PRINT_HEX
	ORB $0b01000011, %AL
	AND $0b11001111, %AL

	CALL PRINT_HEX

	MOV $NL, %SI
	CALL PRINT


	PUSH %AX

	CALL PS2_WAIT_WRITE
	MOVB $0x60, %AL
	OUTB %AL, $0x64

	POP %AX

	CALL PS2_WAIT_WRITE
	OUTB %AL, $0x60

	MOV $PORT1_RESET, %SI
	CALL PRINT
	CALL PS2_WAIT_WRITE
	MOVB $0xFF, %AL
	OUTB %AL, $0x60
	CALL PS2_WAIT_READ
	INB $0x60, %AL
	CMP $0xFA, %AL
	JNE .TEST_FAIL
	MOV $TEST_PASS, %SI
	CALL PRINT
	CALL PS2_WAIT_READ
	INB $0x60, %AL

	MOV $PORT2_RESET, %SI
	CALL PRINT
	CALL PS2_SECOND
	MOVB $0xFF, %AL
	OUTB %AL, $0x60
	CALL PS2_WAIT_READ
	INB $0x60, %AL
	CMP $0xFA, %AL
	JNE .TEST_FAIL
	MOV $TEST_PASS, %SI
	CALL PRINT
	CALL PS2_WAIT_READ
	INB $0x60, %AL

	CALL PS2_SECOND
	JC .TEST_FAIL
	MOV $0xF4, %AL
	OUTB %AL, $0x60

	MOVW $INTHAND, %ES:(0x09*4)
	MOVW $0x0, %ES:(0x09*4+2)
	MOVW $MOUSEHAND, %ES:(0x74*4)
	MOVW $0x0, %ES:(0x74*4+2)
	STI

.LOOP:
	JMP .LOOP
.TEST_FAIL:
	MOV $TEST_FAIL, %SI
	CALL PRINT
	JMP .LOOP

PS2_WAIT_READ:
	PUSH %CX
	MOV $0x2710, %CX
	PUSH %AX
.PS2_READ_LOOP:
	PAUSE
	INB $0x64, %AL
	DEC %CX
	JZ .PS2_TIMEOUT
	AND $0x02, %AL
	JNZ .PS2_READ_LOOP
	JMP .PS2_DONE

PS2_WAIT_WRITE:
	PUSH %CX
	MOV $0x2710, %CX
	PUSH %AX
.PS2_WRITE_LOOP:
	PAUSE
	INB $0x64, %AL
	DEC %CX
	JZ .PS2_TIMEOUT
	AND $0x01, %AL
	JZ .PS2_WRITE_LOOP
	JMP .PS2_DONE

.PS2_TIMEOUT:
	STC
.PS2_DONE:
	POP %AX
	POP %CX
	RET

PS2_SECOND:
	CALL PS2_WAIT_WRITE
	MOV $0xD4, %AL
	OUTB %AL, $0x64

	CALL PS2_WAIT_READ
	RET

PRINT_HEX:
	PUSH %BX
	PUSH %SI
	PUSH %AX
	XOR %AH, %AH
	SHR $4, %AL
	AND $0x0F, %AL
	ADD $HEX, %AX
	MOV %AX, %SI
	LODSB
	XORB %BH, %BH
	MOVB $0x0F, %BL
	MOVB $0x0E, %AH
	INT $0x10
	POP %AX
	PUSH %AX
	AND $0x0F, %AL
	ADD $HEX, %AX
	MOV %AX, %SI
	LODSB
	XORB %BH, %BH
	MOVB $0x0F, %BL
	MOVB $0x0E, %AH
	INT $0x10

	POP %AX
	POP %SI
	POP %BX
	RET

PRINT:
	PUSHA
PRINTSTART:
	XORB %BH, %BH
	MOVB $0x0F, %BL
	MOVB $0x0E, %AH
	LODSB
	OR %AL, %AL
	JZ PRINTDONE
	INT $0x10
	JMP PRINTSTART
PRINTDONE:
	POPA
	RET

DISP:
	PUSHA
	XOR %CX, %CX
	XOR %DX, %DX 
DISPSTART:
	CMP $0x5000, %CX
	JGE DISPDONE
	LODSB
	MOV $0x0C, %AH
	INT $0x10
	INC %CX
	JMP DISPSTART
DISPDONE:
	POPA
	RET
IS_SINGLE_CHANNEL: .BYTE 0x00
.SECTION .rodata
TEST: .ASCIZ "welcome to freaky os\r\n"
MOUSE: .ASCIZ "MOUSE!!!!!\r\n"

CONFIG_MSG: .ASCIZ "PS/2 config byte: "
TEST_MSG: .ASCIZ "Controller self-test "
SINGLE_CHANNEL: .ASCIZ "Single channel PS/2\r\n"
DUAL_CHANNEL: .ASCIZ "Dual channel PS/2\r\n"

TEST_PASS: .ASCIZ "OK\r\n"
TEST_FAIL: .ASCIZ "FAILED\r\n"

PORT1_NAME: .ASCIZ "PS/2 1 test "
PORT2_NAME: .ASCIZ "PS/2 2 test "

PORT1_RESET: .ASCIZ "PS/2 1 reset "
PORT2_RESET: .ASCIZ "PS/2 2 reset "

NL: .ASCIZ "\r\n"

HEX: .ASCII "0123456789ABCDEF"
KBMAP:
	.BYTE 0
	.BYTE 0x1b
	.ASCIZ "1234567890-=\b\tqwertyuiop[]\n"
	.ASCIZ "asdfghjkl;'`"
	.ASCIZ "\\zxcvbnm,./"
	.BYTE 0x2a
	.BYTE 0x0D
	.BYTE 0x20

