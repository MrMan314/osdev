.CODE32
.GLOBL _start
.EXTERN CLEAR
.EXTERN ISR_BEGIN
.EXTERN PS2_START
.EXTERN FLOPPY_DETECT
.EXTERN PRINT_HEX_8
.EXTERN PRINT_HEX_16
.EXTERN PRINT_HEX_32
_start:
	CLI

	CALL CLEAR

	MOV $0x000B80A0, %EDI
	CALL FLOPPY_DETECT
	CALL PS2_START

	// PIC initialization sequence
	MOV $0x11, %AL
	OUT %AL, $0x20
	OUT %AL, $0xA0

	// set vector offsets for pic 1 & 2
	MOV $0x20, %AL
	OUT %AL, $0x21
	MOV $0x28, %AL
	OUT %AL, $0xA1

	// notify PICs of eachothers' presence
	MOV $0x04, %AL
	OUT %AL, $0x21
	MOV $0x02, %AL
	OUT %AL, $0xA1

	// set PIC to 8086 mode
	MOV $0x01, %AL
	OUT %AL, $0x21
	OUT %AL, $0xA1

	// unmask PICs
	XOR %AL, %AL
	OUT %AL, $0x21
	OUT %AL, $0xA1

	MOV $47, %ECX
	FILL_IDT:
	MOV %CX, %AX
	SHL $3, %AX
	MOV $0xA000, %EBX
	ADD %AX, %BX
	MOV %EBX, %EDI
	LEA OFFSET_LOW, %EBX

	LEA ISR_BEGIN, %EAX
	MOV %ECX, %EDX
	SHL $2, %EDX
	ADD %EDX, %EAX
	MOV (%EAX), %EAX
	MOV %AX, (%EBX)
	SHR $16, %EAX

	LEA OFFSET_HIGH, %EBX
	MOV %AX, (%EBX)
	LEA IDT_ENTRY, %ESI
	LODSL
	STOSL
	LODSL
	STOSL
	LOOP FILL_IDT
	LIDT (IDTR)
	STI
//	.BYTE 0xFF

	MOV $0xDEADBEEF, %EAX
	MOV $0xF0, %CH
	MOV $0xB8F90, %EDI
	CALL PRINT_HEX_32

LOOP:
	JMP LOOP

TEST_ISR:
	PUSHA
	MOV $0x0F6F0F68, %EAX
	MOV $0xB8008, %EBX
	MOV %EAX, (%EBX)
	POPA
	IRET

//.SECTION .data
IDT_ENTRY:
	OFFSET_LOW: .WORD 0x0000
	SS: .WORD 0x0008
	RESERVED: .BYTE 0x00
	FLAGS: .BYTE 0x8E
	OFFSET_HIGH: .WORD 0x0000

.SECTION .rodata
IDTR:
	.WORD 2048
	.LONG 0xA000

//IDT_START:
//.SPACE 2048
//IDT_END:
